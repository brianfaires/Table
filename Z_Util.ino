inline uint8_t scaleParam(uint8_t param, uint8_t minVal, uint8_t maxVal) {
  return minVal + param * (maxVal - minVal + 1) / 256;
}
inline int8_t scaleParam(int8_t param, int8_t minVal, int8_t maxVal) {
  return minVal + (param * (maxVal - minVal + 1) + 128*(maxVal - minVal + 1)) / 256;
}
inline uint16_t scaleParam16(uint8_t param, uint16_t minVal, uint16_t maxVal) {
  return minVal + param * (maxVal - minVal + 1) / 256;
}
inline int16_t scaleParam16(int8_t param, int16_t minVal, int16_t maxVal) {
  return minVal + (param * (maxVal - minVal + 1) + 128*(maxVal - minVal + 1)) / 256;
}
/*
const uint8_t PROGMEM gamma8[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,
    2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,
    5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,
   10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
   17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
   25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
   37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
   51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
   69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
   90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
*/
/*const uint8_t PROGMEM reverseGamma8[] = {
    0, 31, 44, 52, 58, 62, 66, 70, 74, 77, 80, 83, 86, 88, 91, 93,
   95, 97, 99,101,103,105,107,108,110,112,113,115,116,118,119,120,
  122,123,124,126,127,128,129,131,132,133,134,135,136,137,138,139,
  140,141,143,144,145,145,146,147,148,149,150,151,152,153,154,155,
  156,156,157,158,159,160,161,161,162,163,164,165,165,166,167,168,
  168,169,170,171,171,172,173,174,174,175,176,176,177,178,178,179,
  180,180,181,182,182,183,184,184,185,186,186,187,187,188,189,189,
  190,190,191,192,192,193,193,194,195,195,196,196,197,197,198,199,
  199,200,200,201,201,202,202,203,203,204,205,205,206,206,207,207,
  208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,
  216,216,217,217,218,218,219,219,219,220,220,221,221,222,222,223,
  223,224,224,225,225,225,226,226,227,227,228,228,229,229,229,230,
  230,231,231,232,232,232,233,233,234,234,235,235,235,236,236,237,
  237,237,238,238,239,239,239,240,240,241,241,241,242,242,243,243,
  243,244,244,245,245,245,246,246,246,247,247,248,248,248,249,249,
  249,250,250,251,251,251,252,252,252,253,253,254,254,254,255,255 };*/
/*
  const uint8_t PROGMEM reverseGamma8[] = {
    0, 10, 41, 49, 58, 62, 66, 70, 74, 77, 80, 83, 86, 88, 91, 93,
   95, 97, 99,101,103,105,107,108,110,112,113,115,116,118,119,120,
  122,123,124,126,127,128,129,131,132,133,134,135,136,137,138,139,
  140,141,143,144,145,145,146,147,148,149,150,151,152,153,154,155,
  156,156,157,158,159,160,161,161,162,163,164,165,165,166,167,168,
  168,169,170,171,171,172,173,174,174,175,176,176,177,178,178,179,
  180,180,181,182,182,183,184,184,185,186,186,187,187,188,189,189,
  190,190,191,192,192,193,193,194,195,195,196,196,197,197,198,199,
  199,200,200,201,201,202,202,203,203,204,205,205,206,206,207,207,
  208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,
  216,216,217,217,218,218,219,219,219,220,220,221,221,222,222,223,
  223,224,224,225,225,225,226,226,227,227,228,228,229,229,229,230,
  230,231,231,232,232,232,233,233,234,234,235,235,235,236,236,237,
  237,237,238,238,239,239,239,240,240,241,241,241,242,242,243,243,
  243,244,244,245,245,245,246,246,246,247,247,248,248,248,249,249,
  249,250,250,251,251,251,252,252,252,253,253,254,254,254,255,255 };
*/
const uint8_t PROGMEM gammaR[] = { // 1.9, replaced 1's with 2's
  0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,5,
  5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,
  11,11,12,12,12,13,13,14,14,15,15,16,16,17,17,18,
  18,19,20,20,21,21,22,22,23,24,24,25,26,26,27,28,
  28,29,30,30,31,32,32,33,34,35,35,36,37,38,38,39,
  40,41,41,42,43,44,45,46,46,47,48,49,50,51,52,53,
  53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,
  69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,
  86,87,88,90,91,92,93,94,95,97,98,99,100,101,103,104,
  105,106,108,109,110,112,113,114,115,117,118,119,121,122,123,125,
  126,127,129,130,132,133,134,136,137,139,140,141,143,144,146,147,
  149,150,152,153,155,156,158,159,161,162,164,165,167,168,170,172,
  173,175,176,178,180,181,183,184,186,188,189,191,193,194,196,198,
  199,201,203,204,206,208,210,211,213,215,217,218,220,222,224,225,
  227,229,231,233,235,236,238,240,242,244,246,247,249,251,253,255 };

const uint8_t PROGMEM reverseGammaR[] = { // 1.9
  0,9,20,24,28,32,35,38,41,44,46,48,51,53,55,57,
  59,61,63,65,66,68,70,72,73,75,76,78,79,81,82,84,
  85,87,88,89,91,92,93,95,96,97,99,100,101,102,103,105,
  106,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,
  123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,
  138,139,140,141,142,143,144,145,146,146,147,148,149,150,151,152,
  152,153,154,155,156,157,157,158,159,160,161,161,162,163,164,164,
  165,166,167,168,168,169,170,171,171,172,173,174,174,175,176,177,
  177,178,179,179,180,181,182,182,183,184,184,185,186,187,187,188,
  189,189,190,191,191,192,193,193,194,195,195,196,197,197,198,199,
  199,200,201,201,202,203,203,204,205,205,206,206,207,208,208,209,
  210,210,211,211,212,213,213,214,215,215,216,216,217,218,218,219,
  219,220,221,221,222,222,223,224,224,225,225,226,227,227,228,228,
  229,229,230,231,231,232,232,233,233,234,235,235,236,236,237,237,
  238,239,239,240,240,241,241,242,242,243,243,244,245,245,246,246,
  247,247,248,248,249,249,250,251,251,252,252,253,253,254,255,255 };

const uint8_t PROGMEM gammaG[] = { // 1.9; replaced 1's with 0's
  0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,5,
  5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,
  11,11,12,12,12,13,13,14,14,15,15,16,16,17,17,18,
  18,19,20,20,21,21,22,22,23,24,24,25,26,26,27,28,
  28,29,30,30,31,32,32,33,34,35,35,36,37,38,38,39,
  40,41,41,42,43,44,45,46,46,47,48,49,50,51,52,53,
  53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,
  69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,
  86,87,88,90,91,92,93,94,95,97,98,99,100,101,103,104,
  105,106,108,109,110,112,113,114,115,117,118,119,121,122,123,125,
  126,127,129,130,132,133,134,136,137,139,140,141,143,144,146,147,
  149,150,152,153,155,156,158,159,161,162,164,165,167,168,170,172,
  173,175,176,178,180,181,183,184,186,188,189,191,193,194,196,198,
  199,201,203,204,206,208,210,211,213,215,217,218,220,222,224,225,
  227,229,231,233,235,236,238,240,242,244,246,247,249,251,253,255 };

const uint8_t PROGMEM reverseGammaG[] = { // 1.9
  0,9,20,24,28,32,35,38,41,44,46,48,51,53,55,57,
  59,61,63,65,66,68,70,72,73,75,76,78,79,81,82,84,
  85,87,88,89,91,92,93,95,96,97,99,100,101,102,103,105,
  106,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,
  123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,
  138,139,140,141,142,143,144,145,146,146,147,148,149,150,151,152,
  152,153,154,155,156,157,157,158,159,160,161,161,162,163,164,164,
  165,166,167,168,168,169,170,171,171,172,173,174,174,175,176,177,
  177,178,179,179,180,181,182,182,183,184,184,185,186,187,187,188,
  189,189,190,191,191,192,193,193,194,195,195,196,197,197,198,199,
  199,200,201,201,202,203,203,204,205,205,206,206,207,208,208,209,
  210,210,211,211,212,213,213,214,215,215,216,216,217,218,218,219,
  219,220,221,221,222,222,223,224,224,225,225,226,227,227,228,228,
  229,229,230,231,231,232,232,233,233,234,235,235,236,236,237,237,
  238,239,239,240,240,241,241,242,242,243,243,244,245,245,246,246,
  247,247,248,248,249,249,250,251,251,252,252,253,253,254,255,255 };

const uint8_t PROGMEM gammaB[] = { // 1.8
  0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
  2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,6,
  6,6,7,7,8,8,8,9,9,10,10,10,11,11,12,12,
  13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,21,
  21,22,22,23,24,24,25,26,26,27,28,28,29,30,30,31,
  32,32,33,34,35,35,36,37,38,38,39,40,41,41,42,43,
  44,45,46,46,47,48,49,50,51,52,53,53,54,55,56,57,
  58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,
  74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,
  91,92,93,95,96,97,98,99,100,102,103,104,105,107,108,109,
  110,111,113,114,115,116,118,119,120,122,123,124,126,127,128,129,
  131,132,134,135,136,138,139,140,142,143,145,146,147,149,150,152,
  153,154,156,157,159,160,162,163,165,166,168,169,171,172,174,175,
  177,178,180,181,183,184,186,188,189,191,192,194,195,197,199,200,
  202,204,205,207,208,210,212,213,215,217,218,220,222,224,225,227,
  229,230,232,234,236,237,239,241,243,244,246,248,250,251,253,255 };

const uint8_t PROGMEM reverseGammaB[] = { // 1.8
  0,7,17,21,25,29,32,34,37,39,42,44,46,48,50,52,
  54,56,58,60,62,63,65,67,68,70,71,73,74,76,77,79,
  80,82,83,84,86,87,88,90,91,92,94,95,96,97,98,100,
  101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,
  118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
  134,135,136,137,138,138,139,140,141,142,143,144,145,146,146,147,
  148,149,150,151,152,152,153,154,155,156,156,157,158,159,160,161,
  161,162,163,164,165,165,166,167,168,168,169,170,171,171,172,173,
  174,175,175,176,177,177,178,179,180,180,181,182,183,183,184,185,
  185,186,187,188,188,189,190,190,191,192,193,193,194,195,195,196,
  197,197,198,199,199,200,201,201,202,203,203,204,205,205,206,207,
  207,208,209,209,210,211,211,212,213,213,214,214,215,216,216,217,
  218,218,219,220,220,221,221,222,223,223,224,224,225,226,226,227,
  228,228,229,229,230,231,231,232,232,233,234,234,235,235,236,236,
  237,238,238,239,239,240,241,241,242,242,243,243,244,245,245,246,
  246,247,247,248,249,249,250,250,251,251,252,253,253,254,255,255 };
  
inline CRGB GammaCorrect(CRGB pixel) {
  CRGB temp;
  temp.r = pgm_read_byte(&gammaR[pixel.r]);
  temp.g = pgm_read_byte(&gammaG[pixel.g]);
  temp.b = pgm_read_byte(&gammaB[pixel.b]);

//temp.r = applyGamma_video2(pixel.r, gammaR, 255, brightnessR);
//temp.g = applyGamma_video2(pixel.g, gammaG, 255, brightnessG);
//temp.b = applyGamma_video2(pixel.b, gammaB, 255, brightnessB);
  
  return temp;
}

inline CRGB ReverseGammaCorrect(CRGB pixel) {
  CRGB temp;
  temp.r = pgm_read_byte(&reverseGammaR[pixel.r]);
  temp.g = pgm_read_byte(&reverseGammaG[pixel.g]);
  temp.b = pgm_read_byte(&reverseGammaB[pixel.b]);
/*  
  //temp.r = pgm_read_byte(&reverseGamma8[pixel.r]);
  //temp.g = pgm_read_byte(&reverseGamma8[pixel.g]);
  //temp.b = pgm_read_byte(&reverseGamma8[pixel.b]);
  uint16_t fixedR = pixel.r * 255 / brightnessR;
  if(fixedR > brightnessR) { fixedR = brightnessR; }

  uint16_t fixedG = pixel.g * 255 / brightnessG;
  if(fixedG > brightnessG) { fixedG = brightnessG; }

  uint16_t fixedB = pixel.b * 255 / brightnessB;
  if(fixedB > brightnessB) { fixedB = brightnessB; }
  
temp.r = applyGamma_video2(pixel.r, 1/gammaR, 255, 255);
temp.g = applyGamma_video2(pixel.g, 1/gammaG, 255, 255);
temp.b = applyGamma_video2(pixel.b, 1/gammaB, 255, 255);*/
  
  return temp;
}

